package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token

data class extends ParserBase {
  override lazy TokenPattern pattern => GroupTokenPattern<ClassNode>([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, values: ["class", "interface"], label: "class_type"),
    GroupTokenPattern([
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, label: "class_name", field: "name"),
      Patterns.genericParameters
    ]),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "extends"),
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, label: "name", field: "name"),
      Patterns.genericArguments
    ], optional: true, label: "extends_class"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "implements"),
      SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, label: "implements_class_name", field: "name"),
      Patterns.genericArguments,
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
        SingleTokenPattern<IdentifierNode>(type: Token.Type.IDENTIFIER, label: "implements_class_name", field: "name"),
        Patterns.genericArguments
      ], repeat: true, optional: true, label: "implements_class"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
    ], optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
      NodeGroupTokenPattern(
        classBodyParsers,
        optional: true,
        label: "class_body_contents",
        statementEndToken: Token(type: Token.Type.SYMBOL, value: ";")
      ),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
    ], label: "class_body")
  ])

  ParserBase[] classBodyParsers => [
    AnnotationParser(),
    ClassParser(),
    StaticBlockParser(),
    FieldParser(),
    ConstructorParser(),
    FunctionParser(),
  ]
}