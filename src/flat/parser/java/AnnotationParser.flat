package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/annotations
import flat/annotations/java
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenPattern pattern => XorTokenPattern<AnnotationNode>([
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "@"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, values: [
        OverrideAnnotation.identifier
      ], label: "annotation_identifier"),
    ], label: "traditional_annotation"),
    NodeTokenPattern([ModifierParser()], label: "modifier"),
  ], label: "annotation", exact: true, metadata: true)

  override public traverseNodes(func(Node, ParseContext, TokenPattern)) {
    if (let modifier = lastMatch.getMatch<NodeTokenMatch>("modifier")) {
      modifier.traverseNodes(func)
    } else if (let id = lastMatch.getValue("annotation_identifier")) {
      match id {
        "Override" => func(OverrideAnnotation(), lastMatch.context, lastMatch.pattern)
      }
    }
  }
}