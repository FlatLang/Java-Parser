package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast/IdentifierNode
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => [
    DotAccessParser(),
    FunctionReferenceAccessParser(),
    BinaryOperationParser(),
    TernaryParser(),
    AssignmentParser(),
    ArrayAccessParser(),
    UnaryOperationParser(),
  ]

  static String[] KEYWORDS = [
    "continue", "for", "switch", "assert", "if",
    "goto", "package", "synchronized", "do",
    "break", "implements", "throw", "else",
    "import", "public", "throws", "case", "enum",
    "instanceof", "return", "transient", "catch",
    "extends", "short", "try", "interface",
    "finally", "strictfp", "while",
  ]

  override lazy TokenPattern pattern => SingleTokenPattern(
    type: Token.Type.IDENTIFIER,
    label: "name",
    notValues: KEYWORDS
  )

  override public generateNode() -> IdentifierNode {
    return IdentifierNode(
      name: lastMatch.getValue("name")
    )
  }
}