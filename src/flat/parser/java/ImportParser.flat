package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token

import flat/extensions/SyntaxStringFunctions

data class extends ParserBase {
  override lazy TokenMatcher matcher => pattern.getMatcher()

  override lazy TokenPattern pattern => GroupTokenPattern<ImportNode>([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "import"),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "static", optional: true, label: "import_type", field: "type"),
    SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "import_location_component"),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ".", label: "import_location_component"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "import_location_component")
    ], repeat: true, optional: true),
    GroupTokenPattern([
      SingleTokenPattern(type: Token.Type.SYMBOL, value: ".", label: "import_location_component"),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "*", label: "import_location_component")
    ], optional: true),
  ])

  override public traverseNodes(func(Node, ParseContext, TokenPattern)) {
    let importType = lastMatch.getValue("import_type")

    func(
      ImportNode(
        location: lastMatch.getValues("import_location_component").join(),
        type: importType ? Token(type: Token.Type.IDENTIFIER, value: importType) : null
      ),
      lastMatch.context,
      lastMatch.pattern
    )
  }
}