package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
    static Logger log = Logger(ForEachLoopParser.class)

    override lazy TokenPattern pattern => GroupTokenPattern<ForEachLoopNode>([
        SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "for"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
        NodeTokenPattern([ParameterParser()]),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ":"),
        NodeTokenPattern(iteratorParsers, greedy: false),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
        NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true),
    ])

    let ParserBase[] iteratorParsers => [
        ArrayReferenceParser(),
        IdentifierParser(),
        LiteralParser(),
        PriorityParser(),
        FunctionCallParser(),
        InstantiationParser(),
    ]
}