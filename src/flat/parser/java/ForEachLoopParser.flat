package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast/ForEachLoopNode
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
  static Logger log = Logger(ForEachLoopParser.class)

  override lazy TokenPattern pattern => GroupTokenPattern([
    SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "for"),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
    NodeTokenPattern([ParameterParser()]),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: ":"),
    NodeTokenPattern(iteratorParsers, label: "iterator", greedy: false),
    SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
    NodeTokenPattern(LocalScopeParser().valueParsers, baseParser: true, label: "for_each_loop_body"),
  ])

  let ParserBase[] iteratorParsers => [
    IdentifierParser(),
    LiteralParser(),
    PriorityParser(),
    FunctionCallParser(),
    InstantiationParser(),
  ]

  override public generateNode() -> ForEachLoopNode {
    return ForEachLoopNode()
  }
}