package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token
import flat/log/Logger

data class extends ParserBase {
    static Logger log = Logger(CatchParser.class)

    override ParserBase[] childParsers => Array()
        :addAll(LocalScopeParser().valueParsers)

    override lazy TokenPattern pattern => GroupTokenPattern<CatchNode>([
        SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "catch"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
        GroupTokenPattern([
            GroupTokenPattern([
                Patterns.type,
                SingleTokenPattern(type: Token.Type.SYMBOL, value: "|"),
            ], optional: true, repeat: true),
            NodeTokenPattern(parameterParsers),
        ]),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ")")
    ], exact: true)

    let ParserBase[] parameterParsers => [
        AnnotationParser(),
        ParameterParser(),
    ]
}