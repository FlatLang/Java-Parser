package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token
import flat/compiler/models/SyntaxTokenFunctions
import flat/log/Logger

data class extends ParserBase {
    static Logger log = Logger(ConstructorParser.class)

    override lazy TokenPattern pattern => GroupTokenPattern<FunctionNode>([
        IdentifierParser().pattern,
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "("),
        GroupTokenPattern([
            NodeTokenPattern(parameterParsers, baseParser: true),
            GroupTokenPattern([
                SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
                NodeTokenPattern(parameterParsers, baseParser: true)
            ], optional: true, repeat: true),
            SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
        ], optional: true),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: ")"),
        GroupTokenPattern([
            SingleTokenPattern(type: Token.Type.IDENTIFIER, value: "throws"),
            Patterns.type,
            GroupTokenPattern([
                SingleTokenPattern(type: Token.Type.SYMBOL, value: ","),
                Patterns.type,
            ], optional: true, repeat: true),
            SingleTokenPattern(type: Token.Type.SYMBOL, value: ",", optional: true),
        ], optional: true),
        GroupTokenPattern([
            SingleTokenPattern(type: Token.Type.SYMBOL, value: "{"),
            NodeGroupTokenPattern(
                LocalScopeParser().valueParsers,
                optional: true,

                statementEndToken: Token(type: Token.Type.SYMBOL, value: ";")
            ),
            SingleTokenPattern(type: Token.Type.SYMBOL, value: "}")
        ])
    ])

    let ParserBase[] parameterParsers => [
        AnnotationParser(),
        ParameterParser(),
    ]

    visible ParserBase[] arrowExpressionValues => [
        AnnotationParser(),
        ThrowParser(),
        IfParser(),
        TryParser(),
        CatchParser(),
        ElseParser(),
        ReturnParser(),
        LiteralParser(),
        SwitchParser(),
        WhileLoopParser(),
        ForLoopParser(),
        ForEachLoopParser(),
        ContinueParser(),
        BreakParser(),
        LocalDeclarationParser(),
        FunctionCallParser(),
        InstantiationParser(),
        IdentifierParser(),
        ArrayReferenceParser(),
        ArrayInstantiationParser(),
        ArrayInitializerParser(),
        UnaryOperationParser(),
        CastParser(),
        PriorityParser(),
        LambdaParser()
    ]
}