package flat/parser/java

import flat/parser
import flat/parser/matchers
import flat/ast
import flat/compiler/models/Token

data class extends ParserBase {
  override ParserBase[] childParsers => Array():addAll([
    AssignmentParser()
  ])

  override lazy TokenPattern pattern => XorTokenPattern<ParameterNode>([
    GroupTokenPattern([
      Patterns.typeName,
      Patterns.genericParameters,
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "[", label: "bracket_start"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "]", label: "bracket_end")
      ], repeat: true),
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "...", optional: true, label: "varargs"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name")
    ]),
    GroupTokenPattern([
      Patterns.typeName,
      Patterns.genericParameters,
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "...", optional: true, label: "varargs"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name"),
      GroupTokenPattern([
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "[", label: "bracket_start"),
        SingleTokenPattern(type: Token.Type.SYMBOL, value: "]", label: "bracket_end")
      ], repeat: true),
    ]),
    GroupTokenPattern([
      Patterns.typeName,
      Patterns.genericParameters,
      SingleTokenPattern(type: Token.Type.SYMBOL, value: "...", optional: true, label: "varargs"),
      SingleTokenPattern(type: Token.Type.IDENTIFIER, label: "name"),
    ]),
  ], label: "parameter")
}